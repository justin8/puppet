#!/bin/bash
LOCK="/run/lock/$(basename "$(readlink -f "$0")")"
LOG="/var/log/$(basename "$(readlink -f "$0")").log"
REPO_NAME="dray.be"
REPO_PATH="/srv/repo"

usage() {
	cat <<-EOF
	usage: $(basename "$(readlink -f "$0")") (full path to repo | repo name | full path to package)

	This script will udpate the specified repo(s).

	OPTIONS:
	-h      Show this help
	-v	Verbose
	EOF
}

clock() { echo -n "[$(date +%H:%M:%S)]"; }

update_repo() {
	# Input: (file|file-glob)
	files=$1
	if [[ -z $files ]]; then
		echo "$(clock) update_repo called without valid input. Aborting"
		exit 1
	fi
	temp=$(mktemp -d)
	cp "${REPO_PATH}/${REPO_NAME}"* "$temp"
	echo "$(clock) Updating repo with file[s]: $files"
	eval repo-add "${temp}/${REPO_NAME}.db.tar.gz" "$REPO_PATH/$files"
	eval repo-add -f "${temp}/${REPO_NAME}.files.tar.gz" "$REPO_PATH/$files"
	mv "${temp}/"* "${REPO_PATH}"
}

read_package_name() {
	# Input: filename
	package=$1
	if [[ -z $package ]] || [[ ! -f $package ]]; then
		echo "read_package_name called without a valid argument. Aborting"
		exit 1
	fi

	pacman -Qqp "$package"
}

clean_old_versions() {
	# Input: package-name
	name=$1
	if [[ -z $name ]]; then
		echo "$(clock) clean_old_versions called without enough arguments. Aborting"
		exit 1
	fi

	echo "$(clock) Checking for old versions of package '$name'"
	cleanlist=""
	for clean_package in "$REPO_PATH/$name"*.pkg.tar*; do
		curname=$(read_package_name "$clean_package")
		if [[ $curname == "$name" ]]; then
			cleanlist="$cleanlist $clean_package"
		fi
	done

	delete_list=$(echo "$cleanlist" | tr ' ' '\n' | xargs ls -l --time-style=+%s | sort -k 6 | awk '{ print $7 }' | head -n -1)
	for clean_package in $delete_list; do
		if [[ -f $clean_package ]]; then
			echo "$(clock) Deleting old version of ${name}: ${clean_package}..."
			rm -rf "$clean_package"
		fi
	done
}

full_repo_update() {
	echo "$(clock) Performing full update on repo"

	for package in "$REPO_PATH"/*.pkg.tar*; do
		packagelist="$packagelist $(read_package_name "$package")"
	done
	packagelist=$(echo "$packagelist" | tr ' ' '\n' | uniq)

	for package_name in $packagelist; do
		clean_old_versions "$package_name"
	done

	update_repo "*.pkg.tar*"
}

single_package_repo_update() {
	# Input: path-to-package
	update_package=$1
	echo "$(clock) Adding package '${update_package##*/}' to repo"

	package_name="$(read_package_name "$update_package")"
	clean_old_versions "$package_name"
	update_repo "${update_package##*/}"
}

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

while getopts ":hv" OPTION; do
	case $OPTION in
		h)
			usage; exit 0;;
		v)
			verbose=1;;
	esac
done
shift $((OPTIND - 1))

if [[ -n $verbose ]]; then
	echo "--------------------------------------------------------------------------------" >> "$LOG"
	exec > >(tee -a "$LOG") 2>&1
else
	exec >> "$LOG" 2>&1
fi

exec 200>"$LOCK"

if flock -xw 30 200; then
	# Check for a package path, otherwise fall back to a full scan
	if echo "$1" | grep -qP '\.(sync|bts)'; then
		# A btsync folder update. Ignore.
		exit 0
	elif [[ -f /$1 ]]; then
		if echo "$1" | grep 'pkg.tar' | grep -vqP '(!sync|.bts$)'; then
			echo "--------------------------------------------------------------------------------" >> "$LOG"
			# Full path to package
			single_package_repo_update "$1"
		else
			# Skip this as it is a file that is not a package
			exit 0
		fi
	elif echo "$1" | grep -q '/'; then
		# Probably a file (or path), which doesn't exist/ is not a pkg. ignore.
		exit 0
	else
		echo "--------------------------------------------------------------------------------" >> "$LOG"
		# Hopefully a full update
		full_repo_update
	fi

	#Fix permissions
	chown -R http. /srv/repo
	chmod -R g+rw /srv/repo
else
	echo "$(clock) Unable to obtain lock. Aborting" && exit 1
fi
